name: Deploy to Google App Engine

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'README.md'
      - 'DEPLOYMENT.md'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment'
        required: false
        default: 'false'
        type: boolean
  repository_dispatch:
    types: [content-updated]
  schedule:
    # Check for external content updates every hour
    - cron: '0 * * * *'

env:
  RUBY_VERSION: '3.2'
  NODE_VERSION: '18'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true
        
    - name: Setup Node.js (if package.json exists)
      uses: actions/setup-node@v4
      if: hashFiles('package.json') != ''
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Install Ruby dependencies
      run: |
        bundle config path vendor/bundle
        bundle config set --local without 'development test'
        bundle install --jobs 4 --retry 3
        
    - name: Install Node.js dependencies (if package.json exists)
      if: hashFiles('package.json') != ''
      run: |
        if [ -f "package-lock.json" ]; then
          npm ci
        else
          npm install
        fi
        
    - name: Sync external content
      run: |
        CONTENT_SOURCE=$(grep -o 'source: "[^"]*"' _config.yml | cut -d'"' -f2 || echo "local")
        
        if [ "$CONTENT_SOURCE" = "external" ]; then
          echo "üì° Syncing external content..."
          
          # Get content repository URL
          CONTENT_REPO=$(grep -o 'repository: "[^"]*"' _config.yml | cut -d'"' -f2)
          
          if [ -n "$CONTENT_REPO" ]; then
            # Remove existing content directory and recreate
            rm -rf content
            mkdir -p content
            
            if [ -d "content-external" ]; then
              echo "Using existing submodule..."
              cd content-external
              git pull origin main || git pull origin master
              cd ..
              cp -r content-external/* content/
            else
              echo "Cloning content repository..."
              git clone "$CONTENT_REPO" temp-content
              cp -r temp-content/* content/
              rm -rf temp-content
            fi
            
            echo "‚úÖ External content synced!"
            ls -la content/
          else
            echo "‚ùå External content repository not configured!"
            exit 1
          fi
        else
          echo "üìÅ Using local content..."
          if [ ! -d "content" ] || [ ! -f "content/home/index.md" ]; then
            echo "‚ùå Local content not found! Please run ./scripts/setup.sh"
            exit 1
          fi
          echo "‚úÖ Local content verified!"
        fi
        
    - name: Build CSS (if npm script exists)
      run: |
        if [ -f "package.json" ] && npm run --silent build:css 2>/dev/null; then
          echo "‚úÖ CSS build completed"
        else
          echo "‚ÑπÔ∏è No CSS build script found, using Jekyll CSS processing"
        fi
        
    - name: Build Jekyll site
      run: |
        echo "üèóÔ∏è Building Jekyll site..."
        bundle exec jekyll build --verbose
        
    - name: Verify build output
      run: |
        if [ ! -d "_site" ]; then
          echo "‚ùå Build failed - _site directory not found"
          exit 1
        fi
        
        echo "‚úÖ Build successful!"
        echo "üìä Site statistics:"
        echo "  Total files: $(find _site -type f | wc -l)"
        echo "  Total size: $(du -sh _site | cut -f1)"
        echo ""
        echo "üìÅ Build output structure:"
        find _site -name "*.html" | head -10
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Verify Google Cloud authentication
      run: |
        echo "üîê Verifying Google Cloud authentication..."
        gcloud auth list
        gcloud config list project
        echo "‚úÖ Authentication verified!"
        
    - name: Deploy to App Engine
      run: |
        echo "üöÄ Deploying to App Engine..."
        gcloud app deploy --quiet --promote --version="$(date +%Y%m%d%H%M%S)"
        
    - name: Show deployment info
      run: |
        echo "‚úÖ Deployment complete!"
        echo ""
        echo "üåê Site URL: https://${{ secrets.GCP_PROJECT_ID }}.appspot.com"
        echo "üìä Console: https://console.cloud.google.com/appengine?project=${{ secrets.GCP_PROJECT_ID }}"
        echo "üìã Logs: https://console.cloud.google.com/logs/query?project=${{ secrets.GCP_PROJECT_ID }}"
        echo ""
        echo "üéØ Deployment trigger: ${{ github.event_name }}"
        
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "üìù Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
        fi
        
    - name: Test deployment
      run: |
        echo "üß™ Testing deployment..."
        sleep 30  # Wait for deployment to propagate
        
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.GCP_PROJECT_ID }}.appspot.com)
        
        if [ "$RESPONSE" = "200" ]; then
          echo "‚úÖ Site is responding correctly!"
        else
          echo "‚ö†Ô∏è Site returned status $RESPONSE, may need a few more minutes"
        fi

  # Separate job for content update notifications (doesn't deploy)
  check-content-updates:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        
    - name: Check for external content updates
      run: |
        # Only check if using external content
        CONTENT_SOURCE=$(grep -o 'source: "[^"]*"' _config.yml | cut -d'"' -f2 || echo "local")
        if [ "$CONTENT_SOURCE" = "external" ]; then
          echo "Checking external content repository for updates..."
          
          # Get content repository URL
          CONTENT_REPO=$(grep -o 'repository: "[^"]*"' _config.yml | cut -d'"' -f2)
          
          if [ -n "$CONTENT_REPO" ] && [ -d "content-external" ]; then
            cd content-external
            git fetch origin
            LOCAL_COMMIT=$(git rev-parse HEAD)
            REMOTE_COMMIT=$(git rev-parse origin/main || git rev-parse origin/master)
            
            if [ "$LOCAL_COMMIT" != "$REMOTE_COMMIT" ]; then
              echo "Content updates found! Triggering deployment..."
              # Trigger the main deploy workflow via repository dispatch
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/dispatches \
                -d '{"event_type":"content-updated"}'
            else
              echo "No content updates found."
            fi
          else
            echo "External content not properly configured."
          fi
        else
          echo "Using local content, no external check needed."
        fi 